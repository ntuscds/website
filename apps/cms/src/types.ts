/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export type OrderItem = {
  name: string;
  image?: string;
  color: string;
  size: string;
  price: number;
  quantity: number;
  id?: string;
}[];

export interface Config {
  collections: {
    categories: Category;
    posts: Post;
    tags: Tag;
    users: User;
    media: Media;
    orders: Order;
    pages: Page;
    navigation: Navigation;
  };
  globals: {};
}
export interface Category {
  id: string;
  name?: string;
}
export interface Post {
  id: string;
  title?: string;
  category?: string | Category;
  tags?: string[] | Tag[];
  layout?: (
    | {
        columns?: {
          width: 'oneThird' | 'half' | 'twoThirds' | 'full';
          alignment: 'left' | 'center' | 'right';
          richText?: {
            [k: string]: unknown;
          }[];
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'content';
      }
    | {
        media: string | Media;
        size?: 'normal' | 'wide' | 'fullscreen';
        caption?: {
          [k: string]: unknown;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'media';
      }
  )[];
  slug?: string;
  status?: 'draft' | 'published';
  author?: string | User;
  publishedDate?: string;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface Tag {
  id: string;
  name?: string;
}
export interface Media {
  id: string;
  alt?: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
}
export interface User {
  id: string;
  name?: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Order {
  id: string;
  items?: OrderItem;
  transaction_id: string;
  transaction_time: string;
  payment_method: string;
  customerEmail: string;
  status: 'pending' | 'paid' | 'delivered';
  updatedAt: string;
  createdAt: string;
}
export interface Page {
  id: string;
  title: string;
  layout?: (
    | {
        title: string;
        subtitle?: string;
        image: string | Media;
        caption: string;
        id?: string;
        blockName?: string;
        blockType: 'card';
      }
    | {
        title: string;
        description?: string;
        fields?: {
          label: string;
          name: string;
          type: 'text' | 'textarea' | 'select' | 'checkbox';
          required?: boolean;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'form';
      }
    | {
        title: string;
        subtitle?: string;
        images?: {
          image: string | Media;
          caption: string;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'photo-gallery';
      }
    | {
        title: string;
        layout: 'one-column' | 'two-columns' | 'three-columns' | 'four-columns';
        cards?: {
          title: string;
          subtitle?: string;
          image: string | Media;
          caption: string;
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'grid';
      }
    | {
        title: string;
        image: string | Media;
        description: string;
        id?: string;
        blockName?: string;
        blockType: 'hero';
      }
    | {
        title: string;
        description?: string;
        items?: {
          title: string;
          description: string;
          image: string | Media;
          id?: string;
        }[];
        layout: 'default' | 'reverse';
        id?: string;
        blockName?: string;
        blockType: 'two-columns';
      }
  )[];
  slug?: string;
  status?: 'draft' | 'published';
  author?: string | User;
  publishedDate?: string;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface Navigation {
  id: string;
  title: string;
  layout?: (
    | {
        logo: string | Media;
        navItems?: {
          label: string;
          subnavItems?: {
            subnavTitle: string;
            url: string;
            id?: string;
          }[];
          id?: string;
        }[];
        status?: 'draft' | 'published';
        id?: string;
        blockName?: string;
        blockType: 'navbar';
      }
    | {
        sections?: {
          sectionTitle: string;
          links?: {
            linkName: string;
            url: string;
            id?: string;
          }[];
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'footer';
      }
  )[];
  slug?: string;
  status?: 'draft' | 'published';
  author?: string | User;
  publishedDate?: string;
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
